React Fundamentals
--------------------

  > Environment set-up 
    > we need to install NodeJS LTS 
    > Visual Studio Code (code editor)  
    > npm i create-react-app // without this to we cant create react app
    > npx create react app <app name> // to create react app
    > VScode Extensions
      > Prettier
      > ES7 React/Redux/GraphQL/React-Native snippets
    

  > Functional & Class component
    > jsx = jsx means use js in html
    > In React, there are two primary ways to define and create components: 
      functional components and class components. Both types of components serve the same purpose, 
      which is to encapsulate and manage the UI and behavior of a specific part of your application. 
      However, they have different syntax and features. React introduced hooks that allow functional components 
      to manage state and side effects, blurring the lines between the two types of components. 
      


    > Functional Components:
      > Functional components are essentially JavaScript functions that return JSX (JavaScript XML) 
        to define the structure and appearance of the component. They are also known as "stateless" or "dumb" components 
        because they do not manage their own state. Instead, you can pass data to them through props (properties) and 
        render the component based on those props.
        > example:
          > import React from 'react';

            function FunctionalComponent(props) {
              return (
                <div>
                  <h1>Hello, {props.name}!</h1>
                </div>
              );
            }

            export default FunctionalComponent;




    > Class Components:
      > Class components are defined as JavaScript classes that extend the React.Component base class. 
        They have a render() method that returns the JSX for the component's UI. Class components can also 
        manage their own state using the setState() method and handle lifecycle methods such as componentDidMount() 
        and componentDidUpdate().

        Example :
          > import React, { Component } from 'react';

            class ClassComponent extends Component {
              constructor(props) {
                super(props);
                this.state = {
                  count: 0,
                };
              }

              componentDidMount() {
                // Runs after the component is mounted to the DOM
                console.log('Component mounted.');
              }

              componentDidUpdate() {
                // Runs when component updates (e.g., when state changes)
                console.log('Component updated.');
              }

              render() {
                return (
                  <div>
                    <h1>Count: {this.state.count}</h1>
                    <button onClick={() => this.setState({ count: this.state.count + 1 })}>
                      Increment
                    </button>
                  </div>
                );
              }
            }

            export default ClassComponent;


          > import React from "react";   

            class App extends React.Component{ 
              render(){  // in class we cant return directly. we need to use render  
                return (
                  <h1> I am from Class</h1>
                )
              }
            }
            export default App;  


  > States & Props 
    > States means storing the data 
    > Props means the way we send the data
    > we can use States & Props in Functional & Class component. but Functional component has more features then class component


  > Event handlers 
    1.onClick event listener
      > if we want any action by onClick 
      > The onClick event generally occurs when the user clicks on an element. It allows the programmer to execute a JavaScript's function when an element gets clicked. 
      
      > <button onClick={()=> alert("Welcome") }>Click</button>


    2.onChange event listener
      > The onChange event occurs when the value of an element has been changed. For radio buttons and checkboxes, 
        the onChange event occurs when the checked state has been changed.
      
      > import React, { useState } from 'react'

        const App = () => {
          const [name,setName] = useState('');
          return (
            <div>
              <center>
                name:{name} <br />
                <input type="text" name="name" onChange={(e)=>setName(e.target.value)} />
              </center>
            </div>
          )
        }
        export default App
      

    3.onSubmit event listener
      > The onSubmit event is an event that occurs when you try to submit a form.
      > import React, { useState } from 'react'

        const App = () => {
          const [data,setData] = useState({
            email:"",
            password:""
          });
          const changeHandler = event =>{
            setData({...data,[event.target.name]:event.target.value})
          }
          const submitHandler = event =>{
            event.preventDefault();
            console.log(data);
          }
          return (
            <div>
              <center>
                <form onSubmit={submitHandler}>
                  <label>E-Mail </label> <br />
                  <input type="text" name="email" onChange={changeHandler} /> <br />
                  <label>Password </label> <br />
                  <input type="password" name="password" onChange={changeHandler} /> <br />
                  <input type="submit" value="Login" /> <br />
                </form>
              </center>
            </div>
          )
        }
        export default App


  > Form handling & validation 

  > CSS & Bootstrap styling 
    > add below link into your <head> before all other stylesheets to load our CSS.
      <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">

  > Re-usable components

  > Lifecycle Methods vs Hooks



React Router v6
----------------
  > It is a package by using this we can build multi page applications easily
  > npm i react-router-dom@6 // version-5 syntax is different so go with version-6



URL Parameters
--------------
  1.Path Params 
    > we send data in path 

    > <Route path='/dashboard/:name' />
      <Route path='/dashboard/john' />

    
  2.Query Params  
    > <Route path='/dashboard' />
      <Route path='/dashboard?name=john' />

  > Handle 404 PageNotFound



HOC
----
  > Higher-order component is a function that takes a component and returns a new component.
  > A higher-order component (HOC) is an advanced technique in React for reusing component logic.
  > HOC is a pure function with zero side-effects and doesn't modify the input component.




React Fundamentals
------------------

  > What is reactJS?
    > React, is an open-source JavaScript library for building user interfaces (UIs) for web applications. 
      It was developed by Facebook and is often used for creating dynamic, interactive, and responsive 
      front-end web applications. React was first released in 2013 and has gained 
      widespread popularity in the web development community.

  > Key features and concepts of React?

    > Component-Based Architecture: React encourages the creation of UI components that represent different parts of a web page or application. 
      These components can be reused throughout the application, making the code more modular and maintainable.

    > Virtual DOM (Document Object Model): React uses a virtual DOM to improve the efficiency of updating the actual DOM. 
      Instead of directly manipulating the DOM whenever there's a change, React first updates a virtual representation of the DOM, 
      compares it with the previous version, and then makes the necessary minimal changes to the real DOM. 
      This approach leads to faster rendering and better performance.

    > Declarative Syntax: React uses a declarative approach, where developers describe the desired UI state, 
      and React takes care of updating the UI to match that state. This is in contrast to imperative programming, 
      where developers specify each step to achieve a particular UI change.

    > JSX (JavaScript XML): JSX is a syntax extension for JavaScript that allows you to write HTML-like code within your JavaScript files. 
      React components often use JSX to define their UI structure and behavior.

    > Unidirectional Data Flow: React enforces a unidirectional data flow, which means that data flows in one direction, 
      from parent components to child components. This makes it easier to understand how data changes affect the application 
      and helps prevent common issues like data inconsistencies.

    > Component Lifecycle: React components have a lifecycle that includes methods like componentDidMount, componentDidUpdate, 
      and componentWillUnmount, which allow developers to hook into various stages of a component's existence and add logic accordingly.

    > State Management: React provides a way to manage the state of a component and the data that drives the UI. 
      While React itself doesn't prescribe a specific state management solution, there are popular libraries and patterns like 
      Redux and the Context API for managing state in React applications.

    > React is often used in conjunction with other libraries and tools, such as React Router for handling client-side routing 
      and Redux for centralized state management. It can also be integrated with various build tools and frameworks, 
      making it a versatile choice for building modern web applications.

  > applications of ReactJS?

    > Single Page Applications (SPAs): React is well-suited for building SPAs where the entire application runs in a single web page, 
      and content is dynamically loaded and updated without full page refreshes. Popular examples of SPAs built with React include Facebook, 
      Instagram, and Airbnb.

    > Web and Mobile Apps: React can be used to build both web and mobile applications. React Native, a framework 
      built on top of React, allows developers to use the same codebase to create native mobile apps for iOS and Android platforms.

    > E-commerce Websites: Many e-commerce platforms use React to create responsive and interactive product catalogs, 
      shopping carts, and checkout processes. React's component-based architecture is beneficial for building complex e-commerce UIs.

    > Content Management Systems (CMS): React can be integrated into CMS platforms to create custom front-ends with rich, 
      interactive user interfaces. This allows content creators and editors to manage website content more efficiently.

    > Dashboards and Analytics Tools: React is commonly used for building data dashboards and analytics tools 
      where data visualization, real-time updates, and interactivity are essential. Libraries like D3.js 
      can be combined with React for advanced data visualization.

    > Social Media Applications: Social networking sites, like Twitter and Pinterest, have used React to create dynamic, real-time, 
      and user-friendly interfaces for posts, comments, and user interactions.

    > Enterprise Software: Many businesses use React to build internal tools and enterprise applications, 
      such as CRM (Customer Relationship Management) systems, project management tools, and HR applications, 
      to enhance employee productivity and workflow management.

    > E-learning Platforms: Online learning platforms and education-related websites often employ React to provide a 
      responsive and interactive learning experience, including video playback, quizzes, and progress tracking.

    > Real-Time Applications: React, in combination with technologies like WebSockets, can be used to 
      build real-time applications such as chat applications, collaborative tools, and online gaming platforms.

    > Progressive Web Apps (PWAs): React is suitable for developing PWAs, which are web applications 
      that provide a native app-like experience in the browser. PWAs offer offline support, fast loading times, 
      and responsiveness across different devices.

    > Marketplace and Booking Platforms: Platforms like Airbnb and Uber have used React to create marketplace interfaces 
      for listing, searching, and booking services or accommodations.

    > Financial and Fintech Applications: React is chosen for building financial dashboards, investment tracking apps, 
      and fintech services that require secure and real-time data updates.

    > Creative Portfolios and Personal Websites: React can be used by artists, designers, and individuals to create 
      visually appealing and interactive portfolios or personal websites.

  > how to create reactJS project?
    > method one:
      npm install create-react-app-g 
      create-react-app <project name>
      
      method two:
      npx create-react-app <project name>

    > NOTE: npx download the create-react-app and after completion of work it will delete the create-react-app package. 
      so we can get some free space


    










































