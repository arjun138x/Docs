Don't overwhelm to learn ReactJS,ðŸ™„ ReactJS is only this muchðŸ‘‡ðŸ˜Š
================================================================
  1.Components
    â€¢  Functional Components
    â€¢  Class Components
    â€¢  JSX (JavaScript XML) Syntax
  2.Props (Properties)
    â€¢  Passing Props  
    â€¢  Default Props
    â€¢  Prop Types
  3.State
    â€¢  useState Hook
    â€¢  Class Component State
    â€¢  Immutable State
  4.Lifecycle Methods (Class Components)
    â€¢  componentDidMount
    â€¢  componentDidUpdate
    â€¢  componentWillUnmount
  5.Hooks (Functional Components)
    â€¢  useState
    â€¢  useEffect
    â€¢  useContext
    â€¢  useReducer
    â€¢  useCallback
    â€¢  useMemo
    â€¢  useRef
    â€¢  useImperativeHandle
    â€¢  useLayoutEffect
  6.Event Handling
    â€¢  Handling Events in Functional Components
    â€¢  Handling Events in Class Components
  7.Conditional Rendering
    â€¢  if Statements
    â€¢  Ternary Operators
    â€¢  Logical && Operator
  8.Lists and Keys
    â€¢  Rendering Lists
    â€¢  Keys in React Lists
  9.Component Composition
    â€¢  Reusing Components
    â€¢  Children Props
    â€¢  Composition vs Inheritance
  10.Higher-Order Components (HOC)
    â€¢  Creating HOCs
    â€¢  Using HOCs for Reusability
  11.Render Props
    â€¢  Using Render Props Pattern
  12.React Router
    â€¢  <BrowserRouter>
    â€¢  <Route>
    â€¢  <Link>
    â€¢  <Switch>
    â€¢  Route Parameters
  13.Navigation
    â€¢  useHistory Hook
    â€¢  useLocation Hook

  State Management
  ================

    14.Context API
      â€¢  Creating Context
      â€¢  useContext Hook
    15.Redux
      â€¢  Actions
      â€¢  Reducers
      â€¢  Store
      â€¢  connect Function (React-Redux)
    16.Forms
      â€¢  Handling Form Data
      â€¢  Controlled Components ==> controlling child state from parent component
      â€¢  Uncontrolled Components
    17.Side Effects
      â€¢  useEffect for Data Fetching ==> create dataFetch function and call it inside the useEffect
      â€¢  useEffect Cleanup ==> write code on return block 
    18.AJAX Requests
      â€¢  Fetch API
      â€¢  Axios Library

  Error Handling 
  ================

    19.Error Boundaries
      â€¢  componentDidCatch (Class Components)
      â€¢  ErrorBoundary Component (Functional Components) 
    20.Testing
      â€¢  Jest Testing Framework
      â€¢  React Testing Library
    21. Best Practices
      â€¢  Code Splitting
      â€¢  PureComponent and React.memo
      â€¢  Avoiding Reconciliation
      â€¢  Keys for Dynamic Lists
    22.Optimization
      â€¢  Memoization
      â€¢  Profiling and Performance Monitoring
    23. Build and Deployment
      â€¢  Create React App (CRA)
      â€¢  Production Builds
      â€¢  Deployment Strategies

  Frameworks and Libraries
  ========================

    24.Styling Libraries
      â€¢  Styled-components
      â€¢  CSS Modules
    25.State Management Libraries
      â€¢  Redux
      â€¢  MobX
    26.Routing Libraries
      â€¢  React Router
      â€¢  Reach Router






React Fundamentals
--------------------

  > Environment set-up 
    > we need to install NodeJS LTS 
    > Visual Studio Code (code editor)  
    > npm i create-react-app // without this to we cant create react app
    > npx create react app <app name> // to create react app
    > VScode Extensions
      > Prettier
      > ES7 React/Redux/GraphQL/React-Native snippets
    

  > Functional & Class component
    > jsx = jsx means use js in html
    > In React, there are two primary ways to define and create components: 
      functional components and class components. Both types of components serve the same purpose, 
      which is to encapsulate and manage the UI and behavior of a specific part of your application. 
      However, they have different syntax and features. React introduced hooks that allow functional components 
      to manage state and side effects, blurring the lines between the two types of components. 
      


    > Functional Components:
      > Functional components are essentially JavaScript functions that return JSX (JavaScript XML) 
        to define the structure and appearance of the component. They are also known as "stateless" or "dumb" components 
        because they do not manage their own state. Instead, you can pass data to them through props (properties) and 
        render the component based on those props.
        > example:
          > import React from 'react';

            function FunctionalComponent(props) {
              return (
                <div>
                  <h1>Hello, {props.name}!</h1>
                </div>
              );
            }

            export default FunctionalComponent;




    > Class Components:
      > Class components are defined as JavaScript classes that extend the React.Component base class. 
        They have a render() method that returns the JSX for the component's UI. Class components can also 
        manage their own state using the setState() method and handle lifecycle methods such as componentDidMount() 
        and componentDidUpdate().

        Example :
          > import React, { Component } from 'react';

            class ClassComponent extends Component {
              constructor(props) {
                super(props);
                this.state = {
                  count: 0,
                };
              }

              componentDidMount() {
                // Runs after the component is mounted to the DOM
                console.log('Component mounted.');
              }

              componentDidUpdate() {
                // Runs when component updates (e.g., when state changes)
                console.log('Component updated.');
              }

              render() {
                return (
                  <div>
                    <h1>Count: {this.state.count}</h1>
                    <button onClick={() => this.setState({ count: this.state.count + 1 })}>
                      Increment
                    </button>
                  </div>
                );
              }
            }

            export default ClassComponent;


          > import React from "react";   

            class App extends React.Component{ 
              render(){  // in class we cant return directly. we need to use render  
                return (
                  <h1> I am from Class</h1>
                )
              }
            }
            export default App;  


  > States & Props 
    > States means storing the data 
    > Props means the way we send the data
    > we can use States & Props in Functional & Class component. but Functional component has more features then class component


  > Event handlers 
    1.onClick event listener
      > if we want any action by onClick 
      > The onClick event generally occurs when the user clicks on an element. It allows the programmer to execute a JavaScript's function when an element gets clicked. 
      
      > <button onClick={()=> alert("Welcome") }>Click</button>


    2.onChange event listener
      > The onChange event occurs when the value of an element has been changed. For radio buttons and checkboxes, 
        the onChange event occurs when the checked state has been changed.
      
      > import React, { useState } from 'react'

        const App = () => {
          const [name,setName] = useState('');
          return (
            <div>
              <center>
                name:{name} <br />
                <input type="text" name="name" onChange={(e)=>setName(e.target.value)} />
              </center>
            </div>
          )
        }
        export default App
      

    3.onSubmit event listener
      > The onSubmit event is an event that occurs when you try to submit a form.
      > import React, { useState } from 'react'

        const App = () => {
          const [data,setData] = useState({
            email:"",
            password:""
          });
          const changeHandler = event =>{
            setData({...data,[event.target.name]:event.target.value})
          }
          const submitHandler = event =>{
            event.preventDefault();
            console.log(data);
          }
          return (
            <div>
              <center>
                <form onSubmit={submitHandler}>
                  <label>E-Mail </label> <br />
                  <input type="text" name="email" onChange={changeHandler} /> <br />
                  <label>Password </label> <br />
                  <input type="password" name="password" onChange={changeHandler} /> <br />
                  <input type="submit" value="Login" /> <br />
                </form>
              </center>
            </div>
          )
        }
        export default App


  > Form handling & validation 

  > CSS & Bootstrap styling 
    > add below link into your <head> before all other stylesheets to load our CSS.
      <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">

  > Re-usable components

  > Lifecycle Methods vs Hooks



React Router v6
----------------
  > It is a package by using this we can build multi page applications easily
  > npm i react-router-dom@6 // version-5 syntax is different so go with version-6



URL Parameters
--------------
  1.Path Params 
    > we send data in path 

    > <Route path='/dashboard/:name' />
      <Route path='/dashboard/john' />

    
  2.Query Params  
    > <Route path='/dashboard' />
      <Route path='/dashboard?name=john' />

  > Handle 404 PageNotFound



HOC
----
  > Higher-order component is a function that takes a component and returns a new component.
  > A higher-order component (HOC) is an advanced technique in React for reusing component logic.
  > HOC is a pure function with zero side-effects and doesn't modify the input component.




React Fundamentals
------------------

  > What is reactJS?
    > React, is an open-source JavaScript library for building user interfaces (UIs) for web applications. 
      It was developed by Facebook and is often used for creating dynamic, interactive, and responsive 
      front-end web applications. React was first released in 2013 and has gained 
      widespread popularity in the web development community.

  > Key features and concepts of React?

    > Component-Based Architecture: React encourages the creation of UI components that represent different parts of a web page or application. 
      These components can be reused throughout the application, making the code more modular and maintainable.

    > Virtual DOM (Document Object Model): React uses a virtual DOM to improve the efficiency of updating the actual DOM. 
      Instead of directly manipulating the DOM whenever there's a change, React first updates a virtual representation of the DOM, 
      compares it with the previous version, and then makes the necessary minimal changes to the real DOM. 
      This approach leads to faster rendering and better performance.

    > Declarative Syntax: React uses a declarative approach, where developers describe the desired UI state, 
      and React takes care of updating the UI to match that state. This is in contrast to imperative programming, 
      where developers specify each step to achieve a particular UI change.

    > JSX (JavaScript XML): JSX is a syntax extension for JavaScript that allows you to write HTML-like code within your JavaScript files. 
      React components often use JSX to define their UI structure and behavior.

    > Unidirectional Data Flow: React enforces a unidirectional data flow, which means that data flows in one direction, 
      from parent components to child components. This makes it easier to understand how data changes affect the application 
      and helps prevent common issues like data inconsistencies.

    > Component Lifecycle: React components have a lifecycle that includes methods like componentDidMount, componentDidUpdate, 
      and componentWillUnmount, which allow developers to hook into various stages of a component's existence and add logic accordingly.

    > State Management: React provides a way to manage the state of a component and the data that drives the UI. 
      While React itself doesn't prescribe a specific state management solution, there are popular libraries and patterns like 
      Redux and the Context API for managing state in React applications.

    > React is often used in conjunction with other libraries and tools, such as React Router for handling client-side routing 
      and Redux for centralized state management. It can also be integrated with various build tools and frameworks, 
      making it a versatile choice for building modern web applications.

  > applications of ReactJS?

    > Single Page Applications (SPAs): React is well-suited for building SPAs where the entire application runs in a single web page, 
      and content is dynamically loaded and updated without full page refreshes. Popular examples of SPAs built with React include Facebook, 
      Instagram, and Airbnb.

    > Web and Mobile Apps: React can be used to build both web and mobile applications. React Native, a framework 
      built on top of React, allows developers to use the same codebase to create native mobile apps for iOS and Android platforms.

    > E-commerce Websites: Many e-commerce platforms use React to create responsive and interactive product catalogs, 
      shopping carts, and checkout processes. React's component-based architecture is beneficial for building complex e-commerce UIs.

    > Content Management Systems (CMS): React can be integrated into CMS platforms to create custom front-ends with rich, 
      interactive user interfaces. This allows content creators and editors to manage website content more efficiently.

    > Dashboards and Analytics Tools: React is commonly used for building data dashboards and analytics tools 
      where data visualization, real-time updates, and interactivity are essential. Libraries like D3.js 
      can be combined with React for advanced data visualization.

    > Social Media Applications: Social networking sites, like Twitter and Pinterest, have used React to create dynamic, real-time, 
      and user-friendly interfaces for posts, comments, and user interactions.

    > Enterprise Software: Many businesses use React to build internal tools and enterprise applications, 
      such as CRM (Customer Relationship Management) systems, project management tools, and HR applications, 
      to enhance employee productivity and workflow management.

    > E-learning Platforms: Online learning platforms and education-related websites often employ React to provide a 
      responsive and interactive learning experience, including video playback, quizzes, and progress tracking.

    > Real-Time Applications: React, in combination with technologies like WebSockets, can be used to 
      build real-time applications such as chat applications, collaborative tools, and online gaming platforms.

    > Progressive Web Apps (PWAs): React is suitable for developing PWAs, which are web applications 
      that provide a native app-like experience in the browser. PWAs offer offline support, fast loading times, 
      and responsiveness across different devices.

    > Marketplace and Booking Platforms: Platforms like Airbnb and Uber have used React to create marketplace interfaces 
      for listing, searching, and booking services or accommodations.

    > Financial and Fintech Applications: React is chosen for building financial dashboards, investment tracking apps, 
      and fintech services that require secure and real-time data updates.

    > Creative Portfolios and Personal Websites: React can be used by artists, designers, and individuals to create 
      visually appealing and interactive portfolios or personal websites.

  > how to create reactJS project?
    > method one:
      npm install create-react-app-g 
      create-react-app <project name>
      
      method two:
      npx create-react-app <project name>

    > NOTE: npx download the create-react-app and after completion of work it will delete the create-react-app package. 
      so we can get some free space


Lazy loading
---------------
  > Lazy loading in ReactJS refers to the technique of delaying the loading of certain components or 
    resources until they are needed. This can help improve the initial loading time of your application 
    and reduce the amount of resources loaded upfront, especially in large applications with many components.

  > React.lazy() with Suspense:
      > With React 16.6 and later, React introduced a new feature called React.lazy() 
        which allows you to dynamically import a component. 
      > You can use React.lazy() to lazily load a component and then use the Suspense component to handle the loading state.
      > Here's a basic example:

      import React, { Suspense } from 'react';

      const LazyComponent = React.lazy(() => import('./LazyComponent'));

      function App() {
        return (
          <Suspense fallback={<div>Loading...</div>}>
            <LazyComponent />
          </Suspense>
        );
      }

      export default App;
      

  > Lazy loading is particularly useful for optimizing performance in large React applications, 
    where loading all components upfront may lead to longer initial load times. It allows you to 
    prioritize the loading of critical components and defer the loading of non-essential components 
    until they are needed, improving the perceived performance and user experience of your application.


SSR and CSR 
--------------  
  > SSR (Server-Side Rendering) and CSR (Client-Side Rendering) are two different approaches to rendering web applications, 
    including those built with ReactJS.

  > Server-Side Rendering (SSR):
    > SSR involves rendering the React components on the server and sending the fully rendered HTML to the client.
    > In SSR, when a user requests a page, the server fetches the data, renders the React components, 
      and sends back a fully populated HTML page to the client.
    > Once the initial HTML is received, the client's browser loads JavaScript and enables interactive features.
    > SSR is beneficial for improving SEO since search engines can crawl and index the content more easily.
    > It can also enhance initial page load performance, especially for users on slower devices or connections, 
      as they can see content sooner.

  > Client-Side Rendering (CSR):
    > CSR, on the other hand, involves sending a minimal HTML document to the client, 
      typically containing just the shell of the application and a JavaScript bundle.
    > Once the JavaScript bundle is downloaded and executed by the client's browser, 
      it dynamically generates and updates the content of the page.
    > In CSR, the initial page load may be faster since only the minimal HTML and JavaScript need to be transferred.
    > However, CSR applications may suffer from slower initial rendering times, 
      which can impact perceived performance, especially on slower devices or connections.
    > CSR can be advantageous for highly interactive applications where the initial load time is less critical, 
      and the user experience relies heavily on dynamic updates and interactions.

  > In summary, SSR and CSR each have their own advantages and trade-offs. The choice between SSR and CSR depends on factors 
    such as performance requirements, SEO considerations, and the nature of the application itself. In some cases, 
    a hybrid approach called "Server-Side Rendering with Client-Side Hydration" can be used, combining the benefits of both 
    SSR and CSR for optimal performance and user experience.



difference between useEffect and useLayoutEffect
--------------------------------------------------

  > useEffect and useLayoutEffect are both hooks provided by React for managing side effects in functional components. 
    They are similar in many ways but differ in terms of when they are executed in the component lifecycle.
  > useLayoutEffect will be called before the user can see the visual changes in that render whereas 
    useEffect will be called after a user is able to see the visual changes in that render.

  useEffect
  ----------

    - ******* IMPORTANT
      - if we didn't pass any dependency array to the useEffect it will call on every render of component.
        - useEffect(() => {
            console.log("useEffect called");
          }); 
      - if we pass empty array as a dependency to the useEffect it will call only initial render of component.
        - useEffect(() => {
            console.log("useEffect called");
          },[]); 

    useEffect is used to perform side effects in function components. It runs after the render is committed to the screen. 
    This means it doesn't block painting the UI and it runs asynchronously. It's often used for data fetching, 
    subscriptions, or manually changing the DOM in response to props or state changes.


    import React, { useEffect, useState } from 'react';

    function Example() {
      const [count, setCount] = useState(0);

      useEffect(() => {
        document.title = You clicked ${count} times;
      }, [count]); // Only re-run the effect if count changes

      return (
        <div>
          <p>You clicked {count} times</p>
          <button onClick={() => setCount(count + 1)}>
            Click me
          </button>
        </div>
      );
    }


  useLayoutEffect
  ---------------
    useLayoutEffect is similar to useEffect, but it fires synchronously after all DOM mutations. 
    This means it runs before the browser has painted the screen, allowing you to make DOM updates and read layout from the DOM. 
    It's similar to componentDidMount and componentDidUpdate in class components.


    import React, { useLayoutEffect, useState } from 'react';

    function Example() {
      const [width, setWidth] = useState(window.innerWidth);

      useLayoutEffect(() => {
        const handleResize = () => {
          setWidth(window.innerWidth);
        };

        window.addEventListener('resize', handleResize);

        // Cleanup function
        return () => {
          window.removeEventListener('resize', handleResize);
        };
      }, []); // No dependencies, only run once after initial render

      return (
        <div>
          <p>Window width: {width}</p>
        </div>
      );
    }


  > Key Differences
    > Timing: useEffect runs after the render is committed to the screen, 
      while useLayoutEffect runs synchronously after all DOM mutations.
    > Blocking: useEffect doesn't block painting, while useLayoutEffect does.
    > Use Cases: Use useEffect for most side effects, especially those that don't require immediate layout or don't block rendering. 
      Use useLayoutEffect when you need to read from the DOM or perform an effect synchronously that requires DOM mutations 
      before the browser paints.


useRef, useMemo, useCallback, React.memo
---------------------------------

  > In React.js, useRef, useMemo, and useCallback are hooks used to optimize and manage state, memoize values, 
    and handle function references respectively.

  useRef
  -------
    > useRef is primarily used to persist values across renders without causing re-renders. 
      It returns a mutable ref object whose .current property is initialized to the passed argument (initialValue). 
      The value of the .current property will persist between renders.

    > useRef is a powerful hook in React that allows you to directly manipulate DOM elements and persist values 
      across renders without triggering re-renders.

    > import React, { useRef } from 'react';

      function MyComponent() {
        const inputRef = useRef(null);

        const focusInput = () => {
          inputRef.current.focus();
        };

        return (
          <div>
            <input ref={inputRef} type="text" />
            <button onClick={focusInput}>Focus Input</button>
          </div>
        );
      }

    > In this example, inputRef is used to store a reference to the input element, allowing the focusInput 
      function to focus on the input element when the button is clicked without causing re-renders.


    > *** To focus on the username input when the component mounts we can use useRef.
      
      import React, { useEffect, useRef } from 'react';

      function LoginPage() {
        const usernameInputRef = useRef(null);

        useEffect(() => {
          usernameInputRef.current.focus();
        }, []);

        return (
          <div>
            <h2>Login</h2>
            <form>
              <label htmlFor="username">Username:</label>
              <input type="text" id="username" name="username" ref={usernameInputRef} /><br /><br />
              <label htmlFor="password">Password:</label>
              <input type="password" id="password" name="password" /><br /><br />
              <input type="submit" value="Login" />
            </form>
          </div>
        );
      }

      export default LoginPage;


  useMemo
  --------
    > useMemo is used to memoize the result of a computation and recompute it only when its dependencies change. 
      It accepts a function and an array of dependencies. The value returned by the function is memoized 
      and will only be recomputed when one of the dependencies changes.

    > import React, { useMemo, useState } from 'react';

      function MyComponent() {
        const [count, setCount] = useState(0);
        
        const squaredCount = useMemo(() => {
          return count ** 2;
        }, [count]);

        return (
          <div>
            <p>Count: {count}</p>
            <p>Count squared: {squaredCount}</p>
            <button onClick={() => setCount(count + 1)}>Increment</button>
          </div>
        );
      }

    > In this example, squaredCount is memoized using useMemo. It will only recompute when the count state changes.
    > eg: If your in home page assume the home page has analytics(multiple API's are calling). if u change the theme light to dark 
      all the components will re-render and api calls was happend it take more time. by using we can prevent this

  useCallback
  -----------
    > useCallback is used to memoize functions so that they aren't recreated on every render unless their dependencies change. 
      It's particularly useful when passing callbacks to child components that rely on reference equality to avoid unnecessary renders.

    > import React, { useState, useCallback } from 'react';

      function ChildComponent({ onClick }) {
        return <button onClick={onClick}>Click Me</button>;
      }

      function ParentComponent() {
        const [count, setCount] = useState(0);

        const handleClick = useCallback(() => {
          setCount(count + 1);
        }, [count]);

        return (
          <div>
            <p>Count: {count}</p>
            <ChildComponent onClick={handleClick} />
          </div>
        );
      }


    > In this example, handleClick is memoized using useCallback. It will only be recreated if the count state changes, 
      ensuring that the reference passed to ChildComponent remains stable.

    - To prevent the page from reloading when the user clicks the dark and light mode toggle button, 
      we can use the useCallback hook to memoize the event handler function passed to the onClick prop of the button. 
      This ensures that the function reference remains stable across renders, preventing unnecessary re-renders 
      and thus avoiding any potential unwanted side effects like API calls.

      > import React, { useState, useCallback } from 'react';

        const App = () => {
          const [darkMode, setDarkMode] = useState(false);

          // Memoize the event handler function using useCallback
          const handleToggleMode = useCallback(() => {
            setDarkMode(prevMode => !prevMode);
          }, []); // No dependencies needed as this function doesn't rely on external variables or props

          return (
            <div className={darkMode ? 'dark-mode' : 'light-mode'}>
              <button onClick={handleToggleMode}>Toggle Mode</button>
              {/* Other content of your app */}
            </div>
          );
        };

        export default App;



  React.memo // CODE IS NOT WORKING
  -----------
    > React.memo is a higher-order component provided by React that's used for optimizing functional components by memoizing them. 
      This means it prevents unnecessary re-renders of a component by memoizing the result based on its props. 
      If the component receives the same props, React will reuse the memoized version instead of rendering it again.


    > Let's say we have a functional component that simply displays a person's name:

      import React from 'react';

      const Person = ({ name }) => {
        console.log('Rendering Person component:', name);
        return <div>{name}</div>;
      };

      export default Person;

    > Now, we can use React.memo to wrap this component:

      import React from 'react';

      const Person = ({ name }) => {
        console.log('Rendering Person component:', name);
        return <div>{name}</div>;
      };

      export default React.memo(Person);


    > In this example:

      - Initially, when Person renders for the first time, you'll see a log statement.
      - If Person re-renders with the same name prop, the log statement won't appear because React.memo will reuse the previous result.
      - If Person re-renders with a different name prop, the log statement will appear, indicating a new render.

useReducer        
--------------
  > `useReducer` is a hook in React that is used for managing complex state logic in your components. It is an alternative to `useState` 
    and is particularly useful when the state logic involves multiple sub-values or when the next state depends on the previous one. 

  > Here's how it works:

    1. Reducer Function: You define a reducer function that takes the current state and an action as arguments, 
      and returns the new state based on the action. The reducer function is similar to the one used in `Array.reduce()`.

    2. Dispatching Actions: You dispatch actions to the reducer using a dispatch function provided by `useReducer`. 
      An action is typically an object with a `type` property that describes the action to perform. 
      You can also include additional data in the action object if necessary.

    3. Updating State: When an action is dispatched, React calls the reducer function with the current state and the action. 
      The reducer then computes the new state based on the action and returns it. React then updates the component with the new state.

  > Here's an example of how you might use `useReducer`:

    import React, { useReducer } from 'react';

    // Reducer function
    const reducer = (state, action) => {
      switch (action.type) {
        case 'increment':
          return { count: state.count + 1 };
        case 'decrement':
          return { count: state.count - 1 };
        default:
          throw new Error();
      }
    };    

    // Component using useReducer
    const Counter = () => {
      // Initializing state using useReducer
      const [state, dispatch] = useReducer(reducer, { count: 0 });

      return (
        <div>
          Count: {state.count}
          <button onClick={() => dispatch({ type: 'increment' })}>Increment</button>
          <button onClick={() => dispatch({ type: 'decrement' })}>Decrement</button>
        </div>
      );
    };

    export default Counter;



difference between useState and useReducer
------------------------------------------

  - `useState` and `useReducer` are both hooks used for managing state in React components, but they serve different purposes and have different use cases.

  - Here's a breakdown of the differences between them:

    1. State Management Complexity:
      - `useState`: It's simpler and more straightforward. It's best used for managing independent, simple state values.
      - `useReducer`: It's more complex and allows for managing state in a more structured way. It's best used for managing complex state logic that involves multiple sub-values or when the next state depends on the previous one.

    2. State Update Logic:
      - `useState`: State updates are based on the new value you provide. When you call the setter function returned by `useState`, React replaces the old state with the new one.
      - `useReducer`: State updates are based on a reducer function. You dispatch actions to the reducer, which then computes the new state based on the current state and the action.

    3. Readability and Maintenance:
      - `useState`: For simple state management, `useState` can lead to more concise and readable code.
      - `useReducer`: For complex state logic, especially when the state transitions are more complex or involve multiple variables, `useReducer` can lead to more maintainable and understandable code.

    4. Performance:
      - Both `useState` and `useReducer` have similar performance characteristics. The choice between them typically doesn't affect performance significantly.

  - Here's a rule of thumb for choosing between them:
    - Use `useState` for simple, independent state values like booleans, numbers, or strings.
    - Use `useReducer` when:
      - You have complex state logic.
      - Your state shape is more complex (e.g., nested objects or arrays).
      - You need to pass down state and dispatch functions to deeply nested components without prop drilling.
              
  In summary, while both hooks are used for state management, `useState` is simpler and more suitable for basic use cases, while `useReducer` provides a more structured approach for managing complex state logic.
































