React Fundamentals
--------------------

  > Environment set-up 
    > we need to install NodeJS LTS 
    > Visual Studio Code (code editor)  
    > npm i create-react-app // without this to we cant create react app
    > npx create react app <app name> // to create react app
    > VScode Extensions
      > Prettier
      > ES7 React/Redux/GraphQL/React-Native snippets
    

  > Functional & Class component
    > jsx = jsx means use js in html
    > In React, there are two primary ways to define and create components: 
      functional components and class components. Both types of components serve the same purpose, 
      which is to encapsulate and manage the UI and behavior of a specific part of your application. 
      However, they have different syntax and features. React introduced hooks that allow functional components 
      to manage state and side effects, blurring the lines between the two types of components. 
      


    > Functional Components:
      > Functional components are essentially JavaScript functions that return JSX (JavaScript XML) 
        to define the structure and appearance of the component. They are also known as "stateless" or "dumb" components 
        because they do not manage their own state. Instead, you can pass data to them through props (properties) and 
        render the component based on those props.
        > example:
          > import React from 'react';

            function FunctionalComponent(props) {
              return (
                <div>
                  <h1>Hello, {props.name}!</h1>
                </div>
              );
            }

            export default FunctionalComponent;




    > Class Components:
      > Class components are defined as JavaScript classes that extend the React.Component base class. 
        They have a render() method that returns the JSX for the component's UI. Class components can also 
        manage their own state using the setState() method and handle lifecycle methods such as componentDidMount() 
        and componentDidUpdate().

        Example :
          > import React, { Component } from 'react';

            class ClassComponent extends Component {
              constructor(props) {
                super(props);
                this.state = {
                  count: 0,
                };
              }

              componentDidMount() {
                // Runs after the component is mounted to the DOM
                console.log('Component mounted.');
              }

              componentDidUpdate() {
                // Runs when component updates (e.g., when state changes)
                console.log('Component updated.');
              }

              render() {
                return (
                  <div>
                    <h1>Count: {this.state.count}</h1>
                    <button onClick={() => this.setState({ count: this.state.count + 1 })}>
                      Increment
                    </button>
                  </div>
                );
              }
            }

            export default ClassComponent;


          > import React from "react";   

            class App extends React.Component{ 
              render(){  // in class we cant return directly. we need to use render  
                return (
                  <h1> I am from Class</h1>
                )
              }
            }
            export default App;  


  > States & Props 
    > States means storing the data 
    > Props means the way we send the data
    > we can use States & Props in Functional & Class component. but Functional component has more features then class component


  > Event handlers 
    1.onClick event listener
      > if we want any action by onClick 
      > The onClick event generally occurs when the user clicks on an element. It allows the programmer to execute a JavaScript's function when an element gets clicked. 
      
      > <button onClick={()=> alert("Welcome") }>Click</button>


    2.onChange event listener
      > The onChange event occurs when the value of an element has been changed. For radio buttons and checkboxes, 
        the onChange event occurs when the checked state has been changed.
      
      > import React, { useState } from 'react'

        const App = () => {
          const [name,setName] = useState('');
          return (
            <div>
              <center>
                name:{name} <br />
                <input type="text" name="name" onChange={(e)=>setName(e.target.value)} />
              </center>
            </div>
          )
        }
        export default App
      

    3.onSubmit event listener
      > The onSubmit event is an event that occurs when you try to submit a form.
      > import React, { useState } from 'react'

        const App = () => {
          const [data,setData] = useState({
            email:"",
            password:""
          });
          const changeHandler = event =>{
            setData({...data,[event.target.name]:event.target.value})
          }
          const submitHandler = event =>{
            event.preventDefault();
            console.log(data);
          }
          return (
            <div>
              <center>
                <form onSubmit={submitHandler}>
                  <label>E-Mail </label> <br />
                  <input type="text" name="email" onChange={changeHandler} /> <br />
                  <label>Password </label> <br />
                  <input type="password" name="password" onChange={changeHandler} /> <br />
                  <input type="submit" value="Login" /> <br />
                </form>
              </center>
            </div>
          )
        }
        export default App


  > Form handling & validation 

  > CSS & Bootstrap styling 
    > add below link into your <head> before all other stylesheets to load our CSS.
      <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">

  > Re-usable components

  > Lifecycle Methods vs Hooks



React Router v6
----------------
  > It is a package by using this we can build multi page applications easily
  > npm i react-router-dom@6 // version-5 syntax is different so go with version-6



URL Parameters
--------------
  1.Path Params 
    > we send data in path 

    > <Route path='/dashboard/:name' />
      <Route path='/dashboard/john' />

    
  2.Query Params  
    > <Route path='/dashboard' />
      <Route path='/dashboard?name=john' />

  > Handle 404 PageNotFound



HOC
----
  > Higher-order component is a function that takes a component and returns a new component.
  > A higher-order component (HOC) is an advanced technique in React for reusing component logic.
  > HOC is a pure function with zero side-effects and doesn't modify the input component.








































