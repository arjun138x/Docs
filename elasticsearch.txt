LINKS
------
  > fuzzy search
    https://hackernoon.com/how-to-use-fuzzy-query-matches-in-elasticsearch-dh1h3167



> Elasticsearch is a powerful and widely used search and analytics engine. It is built on top of the 
  Apache Lucene library and is known for its distributed nature, scalability, and real-time search capabilities. 
  Here are some basic terminologies related to Elasticsearch:


> Elasticsearch terminologies
    1.Cluster: A cluster is a collection of one or more Elasticsearch nodes (servers) that work together to 
      provide distributed indexing and search capabilities. It provides fault tolerance and high availability.

    2.Node: A node is an individual server or instance of Elasticsearch that is part of a cluster. 
      Each node contributes to the cluster's performance, stores data, and participates 
      in the distributed indexing and search operations.
    
    3.Index: An index is a logical namespace that acts as a container for storing and organizing related data. 
      It is similar to a database in a relational database management system (RDBMS). 
      You can have multiple indices within a cluster.
    
    4.Document: A document is the basic unit of information in Elasticsearch. It is a JSON (JavaScript Object Notation) object 
      that contains data. Documents are stored within an index and are uniquely identified by a unique ID.
    
    5.Type: In earlier versions of Elasticsearch, an index could have multiple types to differentiate different 
      types of documents within the index. However, starting from Elasticsearch 6.0, types have been deprecated, 
      and each index can have only one type called "_doc".
    
    6.Shard: Elasticsearch divides an index into multiple shards, which are smaller, self-contained units of data. 
      Each shard is an independent index in itself and can be distributed across different nodes in a cluster. 
      Sharding allows Elasticsearch to horizontally scale its data storage and processing capabilities.
    
    7.Replica: Elasticsearch provides the ability to create replicas of shards.
      Replicas are exact copies of the primary shards and serve as backups to ensure data availability and improve read performance. 
      Replicas can be distributed across different nodes to provide fault tolerance.
    
    8.Query: A query is a way to search and retrieve documents from Elasticsearch. Elasticsearch supports a wide range of query types, 
      including simple match queries, term queries, range queries, full-text queries, and more. Queries can be performed 
      on individual fields or across multiple fields.
    
    9.Mapping: Mapping is the process of defining the schema or structure of the documents within an index. 
      It specifies the data types of fields, whether they should be indexed or not, and how they should be analyzed for searching. 
      Elasticsearch can automatically infer mappings, but you can also define custom mappings to have more control over the indexing and searching process.
    
    10. Aggregations: Aggregations in Elasticsearch allow you to perform analytics and statistical operations on your data. 
      They enable you to extract insights and summarize data based on various criteria, such as grouping, filtering, sorting, 
      and calculations.


> delete all data in index using sh file

  BASE_URL='http://localhost:9200' # local

  wget --no-check-certificate --quiet \
    --method POST \
    --timeout=0 \
    --header 'Content-Type: application/json' \
    --body-data '{
      "query": {
          "match_all": {}
      }
  }' \
    "${BASE_URL}/<index_name>/_delete_by_query"


> delete all data in index using postmen

  > POST http://localhost:9200/<index_name>/_delete_by_query
    {
        "query": {
            "match_all": {}
        }
    }



> To delete an index, use:
  $ curl -XDELETE 'localhost:9200/logs?pretty'

> To delete all indices (use with extreme caution) use:
  $ curl -XDELETE 'localhost:9200/_all?pretty'$


search Categories:
  > match : Matches if any one of the search keywords are present in the field (analyzing is done on the search keywords too)
    Type : full-text
    Query : "search better"
    Will Match : 
      > 1. can I search for better results 
        2. search better please 
        3. you know, for SEARCH 
        4. there is a better place out there
    Will Not Match : 
      > 1. sear for the box 
        2. I won the bet 
        3. there are some things 
        4. some people are good at everything


  > multi-match : To apply match query to multiple fields
    Type : full-text
    Query : key1: "search" key2: "better"
    Will Match : if key1 has the word "search" OR if key2 has the word "better"	
    Will Not Match : 
      > N/A


  > match_phrase : search better	
    Type : full-text
    Query : search better	
    Will Match : 
      > 1. let me search better	
    Will Not Match : 
      > 1. can I search for better results
  

  > term : The query is applied to the generated tokens Since no analysis is performed, the keyword is searched as an exact match	
    Type : term
    Query : tasty
    Will Match : 
      > 1. the food was tasty	
    Will Not Match : 
      > 1. the food was Tasty 
        2. the food was TASTY


  > exists : Returns documents that contain an indexed value for a field
    Type : term
    Query : exists:{ "field":"name" }
    Will Match : 
      > returns all the documents that have the field called "name"
    Will Not Match : 
      > N/A
    

  > range : returns documents containing values within the specified range specified in the field applied
    Type : term
    Query : age:{ "gte": 20, "lte":30 }	
    Will Match : 
      > returns all the documents with value of "age" field falling between 20 and 30 (including 20 and 30)	
    Will Not Match : 
      > N/A
        

  > ids : 
    Type : term
    Query : returns the documents that has the specified document ids
    Will Match : 
      > N/A	
    Will Not Match : 
      > N/A	
             

  > prefix : search for the exact term (including the casing) at the start of a word
    Type : term
    Query : Mult
    Will Match : 
      > 1. Multi 
        2. Multiple 
        3. Multiply 
        4. Multiplication
    Will Not Match : 
      > 1. mult

             

  > wildcard : matches all the terms with the given wild card pattern
    Type : term
    Query : c*a	
    Will Match : 
      > 1. china 
        2. canada 
        3. cambodia	
    Will Not Match : 
      > 1. cabbage

             

  > regexp : matches the terms with the given regex pattern	
    Type : term
    Query : res[a-z]*	
    Will Match : 
      > 1. restaurant 
        2. research	
    Will Not Match : 
      > 1. res123

             

  > fuzzy : returns documents that contain terms similar to that of the search term
    Type : term
    Query : Sao Paulo	
    Will Match : 
      > São Paulo	
    Will Not Match : 
      > Chennai
             

  > bool : to apply a combination of queries and logical operators	
    Type : compound	
    Query : must , key1:"search" should, key2:"better" must_not, key3:"silk"	
    Will Match : 
      > 1. search will be better 
        2. search will be there	
    Will Not Match : 
      > 1. search better for silk 
        2. search for silk
             

  > function_score: weight : gives higher scores for higher weights	
    Type : compound	
    Query : search clause1 - weight 50 search clause 2 - weight 25	
    Will Match : 
      > the documents with the search clause 1 gets a higher score than that of search clause 2 matching documents	
    Will Not Match : 
      > N/A
                

  > query_string : multi-purpose query that “can club” the usage of other queries like "match","multi-match","regexp","wildcard" etc. It has strict formatting	
    Type : full-text		
    Query : (position:engineer) OR (salary:(>=10000 AND <=52000))	
    Will Match : 
      > documents with text 'engineer' in the field ‘position’ OR the documents which have a salary range between 10,000 and 52,000 (including 10,000 and 52,000)	
    Will Not Match : 
      > N/A


  > simple_query_string	 : same as query_string, but non-strict	
    Type : full-text		
    Query : (position:engineer) | (country:china)	
    Will Match : 
      > documents with 'engineer' in the field ‘position’ OR china in the field ‘country’	
    Will Not Match : 
      > N/A
        
             

BACKUP AND RESTORE DATA
  > create one folder <mkdir es_backup>
  > give the permissions to the folder
    > sudo chown -R elasticsearch:elasticsearch /home/agira/Desktop/es_backup/
    > sudo chmod -R 777 /home/agira/Desktop/es_backup/
  > sudo nano /etc/elasticsearch/elasticsearch.yml
    > add this line in this file
      > path.repo: ["/home/agira/Desktop/es_backup"]
  > sudo systemctl restart elasticsearch
  > PUT /_snapshot/es_backup_aug07
    {
      "type": "fs",
      "settings": {
        "compress": true,
        "location": "/home/agira/Desktop/es_backup"
      }
    }

  > Verify the Snapshot
    > GET /_snapshot/_all

  > Create a Snapshot
    > PUT /_snapshot/es_backup_aug07/snapshot_1?wait_for_completion=true
      {
        "indices": "_all",   
        "ignore_unavailable": true,
        "include_global_state": false
      }

  > Restoring from a Snapshot
    > POST /_snapshot/es_backup_aug07/snapshot_1/_restore
      {
        "indices": "ner,ocr",   
        "ignore_unavailable": true,
        "include_global_state": false
      }


