
INTRODUCTION
=============
  > NestJS is a popular open-source web application framework for building scalable and maintainable server-side applications 
    in TypeScript or JavaScript. It is often used for developing server-side applications, particularly in the context of 
    building web APIs and microservices. NestJS is built on top of Express.js, one of the most popular Node.js web frameworks, 
    but it also provides a more structured and opinionated approach to building applications.

  > NestJS combines element of object-oriented programming, functional programming, and reactive programming.
  > NestJS makes use of robust HTTP server frameworks (default: Express.js)

  > the philosophy behind NestJS
    > the rise of popular web technologies such as Angular, React and Vue has massively improved the development experience.
    > however, while Node.js (for the server-side) has plenty of great libraries, none of them effectively solves the main problem of architecture.
    > NestJS provides an out-of-the-box application architecture which allows developers and teams to create highly testable, scalable, 
      loosely coupled and easy-to-maintain applications.

  Key features and concepts of NestJS include:

    > TypeScript: NestJS is built using TypeScript, which is a statically typed superset of JavaScript. This allows for strong typing, 
      better code quality, and improved developer tooling.

    > Modular architecture: NestJS encourages a modular and organized code structure. Applications are divided into modules, 
      and each module encapsulates a specific part of the application's functionality.

    > Dependency injection: It uses a dependency injection system, making it easy to manage and inject dependencies into various components, 
      improving code maintainability and testability.

    > Decorators: NestJS utilizes decorators to define various components and configurations, such as controllers, routes, services, 
      and middleware, in a more intuitive way.

    > Middleware support: Middleware can be used to intercept and process incoming requests before they reach the route handlers.

    > Controllers and routes: NestJS follows a controller-based approach to handling incoming HTTP requests. 
      Controllers define routes and request handling logic.

    > Data persistence: While NestJS doesn't prescribe a specific database or ORM, it can work with various databases 
      and data access libraries, making it flexible for data storage.

    > Built-in testing: NestJS provides tools and utilities for testing applications, including unit and end-to-end testing.

    > WebSocket support: NestJS has built-in support for WebSockets, allowing you to build real-time applications.

    > Built-in support for GraphQL: NestJS offers native support for building GraphQL APIs, in addition to RESTful APIs.

    > Interceptors and guards: You can use interceptors to transform or manipulate the data flow, and guards to implement 
      authentication and authorization logic.

    > NestJS has gained popularity in the Node.js community due to its well-structured and organized approach to building applications. 
      It is often chosen for projects that require a high degree of maintainability, testability, and scalability.
      

MODULES
======== 

  > In NestJS, modules are a fundamental building block of the application structure. They help you organize your code into 
    cohesive and reusable units. Modules encapsulate related components, controllers, providers, and other features of your application.

  > Creating a Module:
    > To create a module, you can use the Nest CLI by running `nest generate module module-name` or manually create a TypeScript file 
      for the module and define a class decorated with `@Module()`.

    > import { Module } from '@nestjs/common';

      @Module({
        controllers: [/* Controllers */],
        providers: [/* Services/Providers */],
      })
      export class MyModule {}

  > Controllers: Controllers handle incoming HTTP requests and define the routes and endpoints of your application. 
    You can associate controllers with a module by adding them to the `controllers` property of the `@Module()` decorator.

  > Providers: Providers are used to define services, repositories, or other objects that can be injected into controllers or other providers. 
    They are declared in the `providers` property of the `@Module()` decorator.

  4. Imports: You can import other modules to make their controllers and providers available in your module. 
    Use the `imports` property to include other modules in your module.

    > @Module({
        imports: [OtherModule],
        controllers: [/* Controllers */],
        providers: [/* Services/Providers */],
      })
      export class MyModule {}

  5. Exports: If you want to make certain components of your module available for use in other modules, you can use the `exports` property.

    > @Module({
        exports: [/* Exported Providers or Modules */],
        controllers: [/* Controllers */],
        providers: [/* Services/Providers */],
      })
      export class MyModule {}

  > Dynamic Modules: NestJS also supports dynamic modules that allow you to configure a module based on runtime values. 
    You can create dynamic modules using the `register()` method.

  > Global Scopes: Modules have different scopes, including module scope, global scope, and dynamic scope. 
    Global scope modules are registered globally and can be used by the entire application.

  > Feature Modules: You can create feature modules that encapsulate related functionality and then import these modules into the root module.

  > Shared Modules: Shared modules contain common providers and can be used across multiple feature modules.

  > Lazy Loading: NestJS supports lazy loading of modules when using a modular router like the `@nestjs/passport` module.

  > Overall, modules in NestJS help you structure your application in a modular and maintainable way, making it easier 
    to manage and scale your codebase. They promote a clean separation of concerns and facilitate reusability.


